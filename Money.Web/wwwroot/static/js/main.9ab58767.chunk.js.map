{"version":3,"sources":["HeaderComponent.tsx","ExpensesContainer.tsx","api.ts","SearchContainer.tsx","expenseTransformers.ts","ChartContainer.tsx","MainContainer.tsx","EditContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","className","to","type","ExpensesContainer","expenses","columns","title","dataIndex","key","render","date","format","sorter","a","b","diff","amount","style","display","justifyContent","Intl","NumberFormat","minimumFractionDigits","marginTop","span","dataSource","rowKey","api","fetchExpenses","filter","url","fetch","result","json","forEach","expense","moment","utc","console","log","message","deleteExpense","id","method","fetchFilters","addFilter","text","deleteFilter","uploadFiles","files","formData","FormData","i","length","append","body","SearchContainer","setExpenses","useState","setText","isLoadingExpenses","setIsLoadingExpenses","isLoadingFilters","setIsLoadingFilters","filters","setFilters","useEffect","getFilters","getExpenses","justify","gutter","icon","loading","onClick","xs","md","Search","placeholder","enterButton","value","onChange","target","onSearch","map","closable","onClose","transformToEditExpenses","description","askIfDuplicate","notDuplicate","findDuplicates","e","isSame","ChartContainer","expensesByMonth","reduce","month","parseInt","sumExpensesByMonth","options","chart","animation","legend","enabled","credits","exporting","tooltip","formatter","currency","maximumFractionDigits","this","y","x","xAxis","categories","Object","keys","tickInterval","yAxis","undefined","labels","series","data","values","highcharts","Highcharts","MainContainer","isLoading","setIsLoading","onDrop","preventDefault","dataTransfer","onDragOver","onDragEnd","clearData","spinning","EditContainer","editExpenses","setEditExpenses","editExpense","App","locale","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ab58767.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Icon } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport \"./header.css\";\n\nexport const Header = () => (\n  <div className=\"header-container\">\n    <Link to=\"/\" className=\"header-homelink\">\n      <div>\n        <Icon type=\"home\" /> Ekonomi\n      </div>\n    </Link>\n    <Link to=\"/edit\" className=\"header-editlink\">\n      Ã„ndra\n    </Link>\n  </div>\n);\n","import React from \"react\";\nimport { Expense } from \"./MainContainer\";\nimport { Table, Row, Col } from \"antd\";\nimport moment from \"moment\";\n\nexport const ExpensesContainer = ({ expenses }: { expenses: Expense[] }) => {\n  const columns = [\n    {\n      title: \"Datum\",\n      dataIndex: \"date\",\n      key: \"date\",\n      render: (date: moment.Moment) => <div>{date.format(\"YYYY-MM-DD\")}</div>,\n      sorter: (a: Expense, b: Expense) => a.date.diff(b.date),\n    },\n    {\n      title: \"Beskrivning\",\n      dataIndex: \"description\",\n      key: \"description\",\n    },\n    {\n      title: \"Belopp\",\n      dataIndex: \"amount\",\n      key: \"amount\",\n      render: (amount: number) => (\n        <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n          {Intl.NumberFormat(\"sv-se\", { minimumFractionDigits: 2 }).format(\n            amount\n          )}\n        </div>\n      ),\n      sorter: (a: Expense, b: Expense) => a.amount - b.amount,\n    },\n  ];\n\n  return (\n    <Row style={{ marginTop: 36 }}>\n      <Col span={24}>\n        <Table dataSource={expenses} columns={columns} rowKey=\"id\" />\n      </Col>\n    </Row>\n  );\n};\n","import moment from \"moment\";\nimport { Expense, Filter } from \"./MainContainer\";\n\nconst fetchExpenses = async (filter?: string) => {\n  try {\n    const url = filter ? \"/expenses?filter=\" + filter : \"/expenses\";\n    const result = await fetch(url);\n    const expenses = (await result.json()) as Expense[];\n    expenses.forEach((expense) => (expense.date = moment.utc(expense.date)));\n    return expenses;\n  } catch (error) {\n    console.log(\"Error fetching expenses: \", error.message);\n    return [];\n  }\n};\n\nconst deleteExpense = async (id: string) => {\n  try {\n    await fetch(\"/expenses?id=\" + id, { method: \"DELETE\" });\n  } catch (error) {\n    console.log(\"Error deleting expense: \", error.message);\n  }\n};\n\nconst fetchFilters = async () => {\n  try {\n    const result = await fetch(\"/filters\");\n    const expenses = (await result.json()) as Filter[];\n    return expenses;\n  } catch (error) {\n    console.log(\"Error fetching filters: \", error.message);\n    return [];\n  }\n};\n\nconst addFilter = async (text: string) => {\n  try {\n    await fetch(\"/filters?text=\" + text, { method: \"PUT\" });\n  } catch (error) {\n    console.log(\"Error adding filter: \", error.message);\n  }\n};\n\nconst deleteFilter = async (id: string) => {\n  try {\n    await fetch(\"/filters?id=\" + id, { method: \"DELETE\" });\n  } catch (error) {\n    console.log(\"Error deleting filter: \", error.message);\n  }\n};\n\nconst uploadFiles = async (files: FileList) => {\n  try {\n    var formData = new FormData();\n    for (var i = 0; i < files.length; i++) {\n      formData.append(\"files\", files[i]);\n    }\n    await fetch(\"/upload\", {\n      method: \"POST\",\n      body: formData,\n    });\n  } catch (error) {\n    console.log(\"Error uploading files: \", error.message);\n  }\n};\n\nexport const api = {\n  fetchExpenses,\n  deleteExpense,\n  fetchFilters,\n  addFilter,\n  deleteFilter,\n  uploadFiles,\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Input, Row, Col, Button, Tag } from \"antd\";\nimport { Expense, Filter } from \"./MainContainer\";\nimport { api } from \"./api\";\n\nexport const SearchContainer = ({\n  setExpenses,\n}: {\n  setExpenses: (expenses: Expense[]) => void;\n}) => {\n  const [text, setText] = useState(\"\");\n  const [isLoadingExpenses, setIsLoadingExpenses] = useState(false);\n  const [isLoadingFilters, setIsLoadingFilters] = useState(false);\n  const [filters, setFilters] = useState<Filter[]>([]);\n\n  useEffect(() => {\n    getFilters();\n  }, []);\n\n  const getExpenses = async (text: string) => {\n    setIsLoadingExpenses(true);\n    setExpenses([]);\n    const expenses = await api.fetchExpenses(text);\n    setExpenses(expenses);\n    setIsLoadingExpenses(false);\n  };\n\n  const getFilters = async () => {\n    setIsLoadingFilters(true);\n    const filters = await api.fetchFilters();\n    setFilters(filters);\n    setIsLoadingFilters(false);\n  };\n\n  return (\n    <div>\n      <Row type=\"flex\" justify=\"center\" gutter={8} style={{ marginTop: 36 }}>\n        <Col>\n          <Button\n            icon=\"save\"\n            loading={isLoadingFilters}\n            onClick={async () => {\n              await api.addFilter(text);\n              await getFilters();\n            }}\n          />\n        </Col>\n        <Col xs={16} md={10}>\n          <Input.Search\n            placeholder=\"SÃ¶kord..\"\n            enterButton\n            value={text}\n            loading={isLoadingExpenses}\n            onChange={(text) => setText(text.target.value)}\n            onSearch={() => getExpenses(text)}\n          />\n        </Col>\n      </Row>\n      <Row type=\"flex\" justify=\"center\" gutter={4}>\n        {filters.map((filter) => (\n          <Tag\n            key={filter.id}\n            style={{ marginTop: 8 }}\n            closable\n            onClick={async () => {\n              setText(filter.text);\n              await getExpenses(filter.text);\n            }}\n            onClose={async () => {\n              await api.deleteFilter(filter.id);\n              await getFilters();\n            }}\n          >\n            {filter.text}\n          </Tag>\n        ))}\n      </Row>\n    </div>\n  );\n};\n","import moment from \"moment\";\nimport { Expense } from \"./MainContainer\";\nimport { EditExpense } from \"./EditContainer\";\n\nexport const transformToEditExpenses = (expenses: Expense[]): EditExpense[] => {\n  return expenses.map(expense => {\n    return {\n      id: expense.id,\n      date: moment.utc(expense.date),\n      description: expense.description,\n      amount: expense.amount,\n      askIfDuplicate:\n        expense.notDuplicate !== true && findDuplicates(expense, expenses)\n    } as EditExpense;\n  });\n};\n\nconst findDuplicates = (expense: Expense, expenses: Expense[]): boolean =>\n  expenses.filter(\n    e =>\n      e.amount === expense.amount &&\n      e.description === expense.description &&\n      e.date.isSame(expense.date)\n  ).length > 1;\n\nexport const sumExpensesByMonth = (expenses: Expense[]) => {\n  return expenses.reduce((a: { [key: number]: number }, b) => {\n    const month = parseInt(b.date.format(\"YYYYMM\"));\n    a[month] = a[month] || 0;\n    a[month] = a[month] + b.amount;\n    return a;\n  }, []);\n};\n","import React from \"react\";\nimport { Row } from \"antd\";\nimport { Expense } from \"./MainContainer\";\nimport * as Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport moment from \"moment\";\nimport { sumExpensesByMonth } from \"./expenseTransformers\";\n\nexport const ChartContainer = ({ expenses }: { expenses: Expense[] }) => {\n  const expensesByMonth = sumExpensesByMonth(expenses);\n\n  const categories = [...Object.keys(expensesByMonth)].map(key =>\n    moment.utc(key + \"01\").format(\"MMM YYYY\")\n  );\n  const data = [...Object.values(expensesByMonth)].map(value => {\n    return { y: value };\n  });\n\n  const options: Highcharts.Options = {\n    chart: {\n      type: \"column\",\n      marginTop: 40,\n      animation: false\n    },\n    title: { text: \"\" },\n    legend: { enabled: false },\n    credits: { enabled: false },\n    exporting: { enabled: false },\n    tooltip: {\n      formatter: function() {\n        const amount = Intl.NumberFormat(\"sv-se\", {\n          style: \"currency\",\n          currency: \"SEK\",\n          minimumFractionDigits: 0,\n          maximumFractionDigits: 0\n        }).format(this.y);\n        return this.x + \" <b>\" + amount + \"</b>\";\n      }\n    },\n    xAxis: {\n      type: \"category\",\n      categories,\n      tickInterval: 3\n    },\n    yAxis: {\n      title: undefined,\n      labels: {\n        format: \"{value} kr\"\n      }\n    },\n    series: [\n      {\n        type: \"column\",\n        data\n      }\n    ]\n  };\n\n  return (\n    <Row>\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </Row>\n  );\n};\n","import React, { useState } from \"react\";\nimport moment from \"moment\";\nimport { ExpensesContainer } from \"./ExpensesContainer\";\nimport { SearchContainer } from \"./SearchContainer\";\nimport { ChartContainer } from \"./ChartContainer\";\nimport { api } from \"./api\";\nimport { Row, Spin } from \"antd\";\n\nexport interface Expense {\n  id: string;\n  date: moment.Moment;\n  description: string;\n  amount: number;\n  notDuplicate: boolean | null;\n}\n\nexport interface Filter {\n  id: string;\n  text: string;\n}\n\nexport const MainContainer = () => {\n  const [expenses, setExpenses] = useState<Array<Expense>>([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const onDrop = async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsLoading(true);\n    await api.uploadFiles(e.dataTransfer.files);\n    setIsLoading(false);\n  };\n\n  return (\n    <Row\n      onDragOver={(e) => e.preventDefault()}\n      onDragEnd={(e) => e.dataTransfer.clearData()}\n      onDrop={onDrop}\n    >\n      <Spin spinning={isLoading}>\n        <SearchContainer setExpenses={setExpenses} />\n        {expenses.length > 0 && (\n          <>\n            <ChartContainer expenses={expenses} />\n            <ExpensesContainer expenses={expenses} />\n          </>\n        )}\n      </Spin>\n    </Row>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Table, Row, Col, Button } from \"antd\";\nimport moment from \"moment\";\nimport { api } from \"./api\";\nimport { transformToEditExpenses } from \"./expenseTransformers\";\nimport { ColumnProps } from \"antd/lib/table\";\n\nexport interface EditExpense {\n  id: string;\n  date: moment.Moment;\n  description: string;\n  amount: number;\n  askIfDuplicate: boolean;\n}\n\nexport const EditContainer = () => {\n  const [editExpenses, setEditExpenses] = useState<Array<EditExpense>>([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    fetchExpenses();\n  }, []);\n\n  const fetchExpenses = async () => {\n    setIsLoading(true);\n    const expenses = await api.fetchExpenses();\n    setEditExpenses(transformToEditExpenses(expenses));\n    setIsLoading(false);\n  };\n\n  const deleteExpense = async (id: string) => {\n    await api.deleteExpense(id);\n    fetchExpenses();\n  };\n\n  const columns: ColumnProps<EditExpense>[] = [\n    {\n      title: \"Datum\",\n      dataIndex: \"date\",\n      key: \"date\",\n      render: (date: moment.Moment) => <div>{date.format(\"YYYY-MM-DD\")}</div>,\n      sorter: (a: EditExpense, b: EditExpense) => a.date.diff(b.date),\n    },\n    {\n      title: \"Beskrivning\",\n      dataIndex: \"description\",\n      key: \"description\",\n    },\n    {\n      title: \"Belopp\",\n      dataIndex: \"amount\",\n      key: \"amount\",\n      render: (amount: number) => (\n        <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n          {Intl.NumberFormat(\"sv-se\", { minimumFractionDigits: 2 }).format(\n            amount\n          )}\n        </div>\n      ),\n      sorter: (a: EditExpense, b: EditExpense) => a.amount - b.amount,\n    },\n    {\n      title: \"Dublett\",\n      dataIndex: \"askIfDuplicate\",\n      key: \"askIfDuplicate\",\n      render: (askIfDuplicate: boolean, editExpense: EditExpense) => {\n        return askIfDuplicate === true ? (\n          <Button onClick={() => deleteExpense(editExpense.id)}>Ta bort</Button>\n        ) : undefined;\n      },\n      sorter: (a: EditExpense, b: EditExpense) => (a.askIfDuplicate ? 1 : -1),\n    },\n  ];\n\n  return (\n    <Row>\n      <Col span={24}>\n        <Table\n          dataSource={editExpenses}\n          columns={columns}\n          rowKey=\"id\"\n          loading={isLoading}\n        />\n      </Col>\n    </Row>\n  );\n};\n","import React from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport { Row, Col } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport { Header } from \"./HeaderComponent\";\nimport { MainContainer } from \"./MainContainer\";\nimport { EditContainer } from \"./EditContainer\";\nimport moment from \"moment\";\nimport \"moment/locale/sv\";\n\nconst App = () => {\n  moment.locale(\"sv\");\n\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Row>\n          <Col xs={0} md={2} />\n          <Col xs={24} md={20}>\n            <Header />\n            <Route path=\"/\" exact component={MainContainer} />\n            <Route path=\"/edit\" component={EditContainer} />\n          </Col>\n          <Col xs={0} md={2} />\n        </Row>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}